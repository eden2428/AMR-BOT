const axios = require("axios");

const simsim = "https://simsimi.cyberbot.top";

module.exports.config = {
  name: "baby",
  version: "1.0.5",
  hasPermssion: 0,
  credits: "ULLASH",
  description: "Cute AI Baby Chatbot | Talk, Teach & Chat with Emotion тШвя╕П",
  commandCategory: "simsim",
  usages: "[message/query]",
  cooldowns: 0,
  prefix: false
};

module.exports.run = async function ({ api, event, args, Users }) {
  try {
    const uid = event.senderID;
    const senderName = await Users.getNameUser(uid);
    const query = args.join(" ").toLowerCase();

    if (!query) {
      const ran = ["Bolo baby", "hum"];
      const r = ran[Math.floor(Math.random() * ran.length)];
      return api.sendMessage(r, event.threadID, (err, info) => {
        if (!err) {
          global.client.handleReply.push({
            name: module.exports.config.name,
            messageID: info.messageID,
            author: event.senderID,
            type: "simsimi"
          });
        }
      });
    }

    if (["remove", "rm"].includes(args[0])) {
      const parts = query.replace(/^(remove|rm)\s*/, "").split(" - ");
      if (parts.length < 2)
        return api.sendMessage(" | Use: remove [Question] - [Reply]", event.threadID, event.messageID);
      const [ask, ans] = parts;
      const res = await axios.get(`${simsim}/delete?ask=${encodeURIComponent(ask)}&ans=${encodeURIComponent(ans)}`, { timeout: 5000 });
      return api.sendMessage(res.data.message, event.threadID, event.messageID);
    }

    if (args[0] === "list") {
      const res = await axios.get(`${simsim}/list`, { timeout: 5000 });
      if (res.data.code === 200) {
        return api.sendMessage(
          `тЩ╛ Total Questions Learned: ${res.data.totalQuestions}\nтШЕ Total Replies Stored: ${res.data.totalReplies}\nтШая╕Оя╕О Developer: ${res.data.author}`,
          event.threadID,
          event.messageID
        );
      } else {
        return api.sendMessage(`Error: ${res.data.message || "Failed to fetch list"}`, event.threadID, event.messageID);
      }
    }

    if (args[0] === "edit") {
      const parts = query.replace("edit ", "").split(" - ");
      if (parts.length < 3)
        return api.sendMessage(" | Use: edit [Question] - [OldReply] - [NewReply]", event.threadID, event.messageID);
      const [ask, oldReply, newReply] = parts;
      const res = await axios.get(`${simsim}/edit?ask=${encodeURIComponent(ask)}&old=${encodeURIComponent(oldReply)}&new=${encodeURIComponent(newReply)}`, { timeout: 5000 });
      return api.sendMessage(res.data.message, event.threadID, event.messageID);
    }

    if (args[0] === "teach") {
      const parts = query.replace("teach ", "").split(" - ");
      if (parts.length < 2)
        return api.sendMessage(" | Use: teach [Question] - [Reply]", event.threadID, event.messageID);
      const [ask, ans] = parts;
      const res = await axios.get(`${simsim}/teach?ask=${encodeURIComponent(ask)}&ans=${encodeURIComponent(ans)}&senderID=${uid}&senderName=${encodeURIComponent(senderName)}`, { timeout: 5000 });
      return api.sendMessage(`${res.data.message || "Reply added successfully!"}`, event.threadID, event.messageID);
    }

    const res = await axios.get(`${simsim}/simsimi?text=${encodeURIComponent(query)}&senderName=${encodeURIComponent(senderName)}`, { timeout: 5000 });
    const responses = Array.isArray(res.data.response) ? res.data.response : [res.data.response];
    
    for (const reply of responses) {
      if (!reply) continue;
      await new Promise((resolve) => {
        api.sendMessage(reply, event.threadID, (err, info) => {
          if (!err && !global.client.handleReply.find(r => r.messageID === info.messageID)) {
            global.client.handleReply.push({
              name: module.exports.config.name,
              messageID: info.messageID,
              author: event.senderID,
              type: "simsimi"
            });
          }
          resolve();
        }, event.messageID);
      });
    }

  } catch (err) {
    console.error(err);
    return api.sendMessage(`| Error in baby command: ${err.message}`, event.threadID, event.messageID);
  }
};

module.exports.handleReply = async function ({ api, event, Users }) {
  try {
    const senderName = await Users.getNameUser(event.senderID);
    const replyText = event.body ? event.body.toLowerCase() : "";
    if (!replyText) return;

    const res = await axios.get(`${simsim}/simsimi?text=${encodeURIComponent(replyText)}&senderName=${encodeURIComponent(senderName)}`, { timeout: 5000 });
    const responses = Array.isArray(res.data.response) ? res.data.response : [res.data.response];

    for (const reply of responses) {
      if (!reply) continue;
      await new Promise((resolve) => {
        api.sendMessage(reply, event.threadID, (err, info) => {
          if (!err && !global.client.handleReply.find(r => r.messageID === info.messageID)) {
            global.client.handleReply.push({
              name: module.exports.config.name,
              messageID: info.messageID,
              author: event.senderID,
              type: "simsimi"
            });
          }
          resolve();
        }, event.messageID);
      });
    }
  } catch (err) {
    console.error(err);
    return api.sendMessage(`| Error in handleReply: ${err.message}`, event.threadID, event.messageID);
  }
};

module.exports.handleEvent = async function ({ api, event, Users }) {
  try {
    const raw = event.body ? event.body.toLowerCase().trim() : "";
    if (!raw) return;

    const senderName = await Users.getNameUser(event.senderID);
    const senderID = event.senderID;

    const triggers = ["baby", "bot", "bby", "jannu", "xan", "ржмрзЗржкрж┐", "ржмржЯ", "ржмрзЗржмрж┐", "ржЬрж╛ржи"];

    if (triggers.includes(raw)) {
      const greetings = [
        "babu khuda lagseЁЯе║",
        "Hop bedaЁЯШ╛,Boss ржмрж▓ bossЁЯШ╝",  
        "ржЖржорж╛ржХрзЗ ржбрж╛ржХрж▓рзЗ ,ржЖржорж┐ ржХрж┐ржирзНрждрзВ ржХрж┐рж╕ ржХрж░рзЗ ржжрзЗржмрзЛЁЯШШ ",  
        "ЁЯРТЁЯРТЁЯРТ",
        "bye",
        "BOSS ER ID https://m.me/ibonex.eden",
        "mb ney bye",
        "meww",
        "ржЧрзЛрж▓рж╛ржк ржлрзБрж▓ ржПрж░ ржЬрж╛ржпрж╝ржЧрж╛ржпрж╝ ржЖржорж┐ ржжрж┐рж▓рж╛ржо рждрзЛржорж╛ржпрж╝ ржорзЗрж╕рзЗржЬ",
        "ржмрж▓рзЛ ржХрж┐ ржмрж▓ржмрж╛, рж╕ржмрж╛рж░ рж╕рж╛ржоржирзЗ ржмрж▓ржмрж╛ ржирж╛ржХрж┐?ЁЯднЁЯдП",  
        "ЁЭЧЬ ЁЭЧ╣ЁЭЧ╝ЁЭШГЁЭЧ▓ ЁЭШЖЁЭЧ╝ЁЭШВ__ЁЯШШЁЯШШ",
        "ЁЭЧЬ ЁЭЧ╡ЁЭЧоЁЭШБЁЭЧ▓ ЁЭШЖЁЭЧ╝ЁЭШВ__ЁЯШПЁЯШП",
        "ржЧрзЛрж╕рж▓ ржХрж░рзЗ ржЖрж╕рзЛ ржпрж╛ржУЁЯШСЁЯШй",
        "ржЕрзНржпрж╛рж╕рж▓рж╛ржоржУржпрж╝рж╛рж▓рж┐ржХрзБржо",
        "ржХрзЗржоржи ржЖрж╕рзЛ",
        "ржмрж▓рзЗржи sir__ЁЯШМ",
        "ржмрж▓рзЗржи ржорзНржпрж╛ржбрж╛ржо__ЁЯШМ",
        "ржЖржорж┐ ржЕржирзНржпрзЗрж░ ржЬрж┐ржирж┐рж╕рзЗрж░ рж╕рж╛ржерзЗ ржХржерж╛ ржмрж▓рж┐ ржирж╛__ЁЯШПржУржХрзЗ",
        "ЁЯЩВЁЯЩВЁЯЩВ",
        "ржПржЯрж╛ржпрж╝ ржжрзЗржЦрж╛рж░ ржмрж╛ржХрж┐ рж╕рж┐рж▓рзЛ_ЁЯЩВЁЯЩВЁЯЩВ",
        "ЁЭЧХЁЭЧпЁЭШЖ ЁЭЧпЁЭЧ╝ЁЭЧ╣ЁЭЧ╣ЁЭЧо ЁЭЧ╜ЁЭЧоЁЭЧ╜ ЁЭЧ╡ЁЭЧ╝ЁЭЧ╢ЁЭЧпЁЭЧ╝ ЁЯШТЁЯШТ",
        "ЁЭЧзЁЭЧоЁЭЧ┐ЁЭЧ╜ЁЭЧ╝ЁЭЧ┐ ЁЭЧпЁЭЧ╝ЁЭЧ╣ЁЭЧ╝_ЁЯЩВ",
        "ЁЭЧХЁЭЧ▓ЁЭШАЁЭЧ╡ЁЭЧ╢ ЁЭЧ▒ЁЭЧоЁЭЧ╕ЁЭЧ╣ЁЭЧ▓ ЁЭЧоЁЭЧ║ЁЭЧ║ЁЭШВ ЁЭЧпЁЭЧ╝ЁЭЧ╕ЁЭЧо ЁЭЧ▒ЁЭЧ▓ЁЭЧпЁЭЧо ЁЭШБЁЭЧ╝__ЁЯе║",
        "ЁЭЧХЁЭЧпЁЭШЖ ржирж╛ ржЬрж╛ржирзБ, ржмрж▓ ЁЯШМ",
        "ржмрзЗрж╢рж┐ bby Bbby ржХрж░рж▓рзЗ leave ржирж┐ржмрзЛ ржХрж┐ржирзНрждрзБ ЁЯШТЁЯШТ",
        "__ржмрзЗрж╢рж┐ ржмрзЗржмрж┐ ржмрж▓рж▓рзЗ ржХрж╛ржорзБрж░ ржжрж┐ржорзБ ЁЯднЁЯдн",
        "ЁЭЩПЁЭЩкЁЭЩвЁЭЩЦЁЭЩз ЁЭЩЬЁЭЩЫ ЁЭЩгЁЭЩЦЁЭЩЮ, ЁЭЩйЁЭЩЦЁЭЩо ЁЭЩЦЁЭЩвЁЭЩа ЁЭЩЩЁЭЩЦЁЭЩаЁЭЩиЁЭЩд? ЁЯШВЁЯШВЁЯШВ",
        "bolo babyЁЯШТ",
        "рждрзЛрж░ ржХржерж╛ рждрзЛрж░ ржмрж╛ржбрж╝рж┐ ржХрзЗржЙ рж╢рзБржирзЗ ржирж╛ ,рждрзЛ ржЖржорж┐ ржХрзЛржирзЛ рж╢рзБржиржмрзЛ ?ЁЯдФЁЯШВ",
        "ржЖржорж┐ рждрзЛ ржЕржирзНржз ржХрж┐ржЫрзБ ржжрзЗржЦрж┐ ржирж╛ЁЯР╕ ЁЯШО",
        "ржЖржо ржЧрж╛ржЫрзЗ ржЖржо ржирж╛ржЗ ржврж┐рж▓ ржХрзЗржи ржорж╛рж░рзЛ, рждрзЛржорж╛рж░ рж╕рж╛ржерзЗ ржкрзНрж░рзЗржо ржирж╛ржЗ ржмрзЗржмрж┐ ржХрзЗржи ржбрж╛ржХрзЛ ЁЯШТЁЯлг",
        "ЁЭЧ╝ЁЭЧ╢ЁЭЧ╢ ржШрзБржорж╛ржирзЛрж░ ржЖржЧрзЗ.! рждрзЛржорж╛рж░ ржоржиржЯрж╛ ржХржерж╛ржпрж╝ рж░рзЗржЦрзЗ ржШрзБржорж╛ржУ.!ЁЯдФ_ржирж╛рж╣ ржорж╛ржирзЗ ржЪрзБрж░рж┐ ржХрж░рждрж╛ржо ЁЯШЮЁЯШШ",
        "ЁЭЧХЁЭЧпЁЭШЖ ржирж╛ ржмрж▓рзЗ ЁЭЧХЁЭЧ╝ЁЭШД ржмрж▓рзЛ ЁЯШШ",
        "ржжрзВрж░рзЗ ржпрж╛, рждрзЛрж░ ржХрзЛржирзЛ ржХрж╛ржЬ ржирж╛ржЗ, рж╢рзБржзрзБ ЁЭЧпЁЭЧпЁЭШЖ ЁЭЧпЁЭЧпЁЭШЖ ржХрж░рж┐рж╕  ЁЯШЙЁЯШЛЁЯдг",
        "ржПржЗ ржПржЗ рждрзЛрж░ ржкрж░рзАржХрзНрж╖рж╛ ржХржмрзЗ? рж╢рзБржзрзБ ЁЭЧХЁЭЧпЁЭШЖ ЁЭЧпЁЭЧпЁЭШЖ ржХрж░рж┐рж╕ ЁЯШ╛",
        "рждрзЛрж░рж╛ ржпрзЗ рж╣рж╛рж░рзЗ ЁЭЧХЁЭЧпЁЭШЖ ржбрж╛ржХржЫрж┐рж╕ ржЖржорж┐ рждрзЛ рж╕рждрзНржпрж┐ ржмрж╛ржЪрзНржЪрж╛ рж╣ржпрж╝рзЗ ржпрж╛ржмрзЛ_тШ╣ЁЯШС",
        "ржЖржЬржм рждрзЛ__ЁЯШТ",
        "ржЖржорж╛ржХрзЗ ржбрзЗржХрзЛ ржирж╛,ржЖржорж┐ ржмрзНржпрж╛рж╕рзНржд ржЖрж╕рж┐ЁЯЩЖЁЯП╗тАНтЩА",
        "ЁЭЧХЁЭЧпЁЭШЖ ржмрж▓рж▓рзЗ ржЪрж╛ржХрж░рж┐ ржерж╛ржХржмрзЗ ржирж╛",
        "ЁЭЧХЁЭЧпЁЭШЖ ЁЭЧХЁЭЧпЁЭШЖ ржирж╛ ржХрж░рзЗ ржЖржорж╛рж░ ржмрж╕ ржорж╛ржирзЗ, EDEN, EDEN ржУ рждрзЛ ржХрж░рждрзЗ ржкрж╛рж░рзЛЁЯШС?",
        "ржЖржорж╛рж░ рж╕рзЛржирж╛рж░ ржмрж╛ржВрж▓рж╛, рждрж╛рж░ржкрж░рзЗ рж▓рж╛ржЗржи ржХрж┐? ЁЯЩИ",
        "ЁЯН║ ржПржЗ ржирж╛ржУ ржЬрзБрж╕ ржЦрж╛ржУ..!ЁЭЧХЁЭЧпЁЭШЖ ржмрж▓рждрзЗ ржмрж▓рждрзЗ рж╣рж╛ржкрж╛ржпрж╝ ржЧрзЗржЫрзЛ ржирж╛ ЁЯе▓",
        "рж╣ржЯрж╛рзО ржЖржорж╛ржХрзЗ ржоржирзЗ ржкржбрж╝рж▓рзЛ ЁЯЩД",
        "ЁЭЧХЁЭЧпЁЭШЖ ржмрж▓рзЗ ржЕрж╕ржорзНржорж╛ржи ржХрж░ржЪрзНржЫрж┐ржЫ,ЁЯШ░ЁЯШ┐",
        "ЁЭЧФЁЭШАЁЭШАЁЭЧоЁЭЧ╣ЁЭЧоЁЭЧ║ЁЭШВЁЭЧ╣ЁЭЧоЁЭЧ╢ЁЭЧ╕ЁЭШВЁЭЧ║ ЁЯРдЁЯРд",
        "ржЖржорж┐ рждрзЛржорж╛рж░ рж╕рж┐ржирж┐ржпрж╝рж░ ржЖржкрзБ ржУржХрзЗ ЁЯШ╝рж╕ржорзНржорж╛ржи ржжрзЗржУЁЯЩБ",
        "ржЦрж╛ржУржпрж╝рж╛ ржжрж╛ржУржпрж╝рж╛ ржХрж░рж╕рзЛ ЁЯЩД",
        "ржПржд ржХрж╛ржЫрзЗржУ ржПрж╕рзЛ ржирж╛,ржкрзНрж░рзЗржо ржП ржкрж░рзЗ ржпрж╛ржмрзЛ рждрзЛ ЁЯЩИ",
        "ржЖрж░рзЗ ржЖржорж┐ ржоржЬрж╛ ржХрж░рж╛рж░ mood ржП ржирж╛ржЗЁЯШТ",
        "ЁЭЧЫЁЭЧ▓ЁЭШЖ ЁЭЧЫЁЭЧоЁЭЧ╗ЁЭЧ▒ЁЭШАЁЭЧ╝ЁЭЧ║ЁЭЧ▓ ржмрж▓рзЛ ЁЯШБЁЯШБ",
        "ржЖрж░рзЗ Bolo ржЖржорж╛рж░ ржЬрж╛ржи, ржХрзЗржоржи ржЖрж╕рзЛ? ЁЯШЪ",
        "ржПржХржЯрж╛ BF ржЦрзБржБржЬрзЗ ржжрж╛ржУ ЁЯШ┐",
        "ржлрзНрж░рзЗржирзНржб рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ ржжрж┐рж▓рзЗ рзл ржЯрж╛ржХрж╛ ржжрж┐ржмрзЛ ЁЯШЧ",
        "oi mama ar dakis na pilis ЁЯШ┐",
        "ЁЯРдЁЯРд",
        "__ржнрж╛рж▓рзЛ рж╣ржпрж╝рзЗ  ржпрж╛ржУ ЁЯШСЁЯШТ",
        "ржПржоржмрж┐ ржХрж┐ржирзЗ ржжрж╛ржУ ржирж╛_ЁЯе║ЁЯе║",
        "ржУржЗ ржорж╛ржорж╛_ржЖрж░ ржбрж╛ржХрж┐рж╕ ржирж╛ ржкрзНрж▓рж┐ржЬ",
        "рзйрзи рждрж╛рж░рж┐ржЦ ржЖржорж╛рж░ ржмрж┐ржпрж╝рзЗ ЁЯРд",
        "рж╣рж╛ ржмрж▓рзЛЁЯШТ,ржХрж┐ ржХрж░рждрзЗ ржкрж╛рж░рж┐ЁЯШРЁЯШС?",
        "ржмрж▓рзЛ ржлрзБрж▓ржЯрзБрж╢рж┐_ЁЯШШ",
        "amr JaNu lagbe,Tumi ki single aso?",
        "ржЖржорж╛ржХрзЗ ржирж╛ ржжрзЗржХрзЗ ржПржХржЯрзБ ржкржбрж╝рждрзЗржУ ржмрж╕рждрзЗ рждрзЛ ржкрж╛рж░рзЛ ЁЯе║ЁЯе║",
        "рждрзЛрж░ ржмрж┐ржпрж╝рзЗ рж╣ржпрж╝ ржирж┐ ЁЭЧХЁЭЧпЁЭШЖ рж╣ржЗрж▓рзЛ ржХрж┐ржнрж╛ржмрзЗ,,ЁЯЩД",
        "ржЖржЬ ржПржХржЯрж╛ ржлрзЛржи ржирж╛ржЗ ржмрж▓рзЗ рж░рж┐ржкрзНрж▓рж╛ржЗ ржжрж┐рждрзЗ ржкрж╛рж░рж▓рж╛ржо ржирж╛_ЁЯЩД",
        "ржЪрзМржзрзБрж░рзА рж╕рж╛рж╣рзЗржм ржЖржорж┐ ржЧрж░рж┐ржм рж╣рждрзЗ ржкрж╛рж░рж┐ЁЯШ╛ЁЯдн -ржХрж┐ржирзНрждрзБ ржмрзЬрж▓рзЛржХ ржирж╛ЁЯе╣ ЁЯШл",
        "ржЖржорж┐ ржЕржирзНржпрзЗрж░ ржЬрж┐ржирж┐рж╕рзЗрж░ рж╕рж╛ржерзЗ ржХржерж╛ ржмрж▓рж┐ ржирж╛__ЁЯШПржУржХрзЗ",
        "ржмрж▓рзЛ ржХрж┐ ржмрж▓ржмрж╛, рж╕ржмрж╛рж░ рж╕рж╛ржоржирзЗ ржмрж▓ржмрж╛ ржирж╛ржХрж┐?ЁЯднЁЯдП",
        "ржнрзБрж▓рзЗ ржЬрж╛ржУ ржЖржорж╛ржХрзЗ ЁЯШЮЁЯШЮ",
        "ржжрзЗржЦрж╛ рж╣рж▓рзЗ ржХрж╛ржаржЧрзЛрж▓рж╛ржк ржжрж┐ржУ..ЁЯдЧ",
        "рж╢рзБржиржмрзЛ ржирж╛ЁЯШ╝ рждрзБржорж┐ ржЖржорж╛ржХрзЗ ржкрзНрж░рзЗржо ржХрж░рж╛ржЗ ржжрж╛ржУ ржирж┐ЁЯе║ ржкржЪрж╛ рждрзБржорж┐ЁЯе║",
        "ржЖржЧрзЗ ржПржХржЯрж╛ ржЧрж╛ржи ржмрж▓рзЛ, тШ╣ ржирж╛рж╣рж▓рзЗ ржХржерж╛ ржмрж▓ржмрзЛ ржирж╛ ЁЯе║",
        "ржмрж▓рзЛ ржХрж┐ ржХрж░рждрзЗ ржкрж╛рж░рж┐ рждрзЛржорж╛рж░ ржЬржирзНржп ЁЯШЪ",
        "ржХржерж╛ ржжрзЗржУ ржЖржорж╛ржХрзЗ ржкржЯрж╛ржмрж╛...!! ЁЯШМ",
        "ржмрж╛рж░ ржмрж╛рж░ Disturb ржХрж░рзЗржЫрж┐рж╕ ржХрзЛржирзЛ ЁЯШ╛, ржЖржорж╛рж░ ржЬрж╛ржирзБ ржПрж░ рж╕рж╛ржерзЗ ржмрзНржпрж╛рж╕рзНржд ржЖрж╕рж┐ ЁЯШЛ",
        "ржЖржорж╛ржХрзЗ ржирж╛ ржжрзЗржХрзЗ ржПржХржЯрзБ ржкржбрж╝рждрзЗ ржмрж╕рждрзЗржУ рждрзЛ ржкрж╛рж░рзЛ ЁЯе║ЁЯе║",
        "ржмрж╛рж░ ржмрж╛рж░ ржбрж╛ржХрж▓рзЗ ржорж╛ржерж╛ ржЧрж░ржо рж╣ржпрж╝ ржХрж┐ржирзНрждрзБ ЁЯШСЁЯШТ",
        "ржУржЗ рждрзБржорж┐ single ржирж╛?ЁЯл╡ЁЯди ЁЯШСЁЯШТ",
        "ржмрж▓рзЛ ржЬрж╛ржирзБ ЁЯШТ",
        "MeowЁЯРд",     
        "ржЖрж░ ржХржд ржмрж╛рж░ ржбрж╛ржХржмрж╛ ,рж╢рзБржиржЫрж┐ рждрзЛ ЁЯд╖ЁЯП╗тАНтЩА",
        "ржХрж┐ рж╣рж▓рзЛ, ржорж┐рж╕ ржЯрж┐рж╕ ржХрж░ржЪрзНржЫрзЛ ржирж╛ржХрж┐ ЁЯдг",
        "Bolo Babu, рждрзБржорж┐ ржХрж┐ ржЖржорж╛ржХрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рзЛ? ЁЯЩИ",
        "ржЖржЬржХрзЗ ржЖржорж╛рж░ mржи ржнрж╛рж▓рзЛ ржирзЗржЗ ЁЯЩЙ",
        "ржЖржорж┐ рж╣рж╛ржЬрж╛рж░рзЛ ржорж╢рж╛рж░ CrushЁЯШУ",
        "ржкрзНрж░рзЗржо ржХрж░рж╛рж░ ржмржпрж╝рж╕рзЗ рж▓рзЗржЦрж╛ржкржбрж╝рж╛ ржХрж░рждрзЗржЫрж┐, рж░рзЗржЬрж╛рж▓рзНржЯ рждрзЛ ржЦрж╛/рж░рж╛'ржк рж╣ржмрзЗржЗ.!ЁЯЩВ",
        "ржЖржорж╛рж░ ржЗрзЯрж╛рж░ржлрзЛржи ржЪрзБ'рж░рж┐ рж╣рзЯрзЗ ржЧрж┐рзЯрзЗржЫрзЗ!! ржХрж┐ржирзНрждрзБ ржЪрзЛрж░'ржХрзЗ ржЧрж╛-рж▓рж┐ ржжрж┐рж▓рзЗ ржЖржорж╛рж░ ржмржирзНржзрзБ рж░рзЗржЧрзЗ ржпрж╛рзЯ!'ЁЯЩВ",
        "ржЫрзЗрж▓рзЗржжрзЗрж░ ржкрзНрж░рждрж┐ ржЖржорж╛рж░ ржПржХ ржЖржХрж╛рж╢ ржкрж░рж┐ржорж╛ржи рж╢рж░ржоЁЯе╣ЁЯлг",
        "__ржлрзНрж░рзА ржлрзЗ'рж╕ржмрзБржХ ржЪрж╛рж▓рж╛ржЗ ржХрж╛'рж░ржи ржЫрзЗрж▓рзЗржжрзЗрж░ ржорзБржЦ ржжрзЗржЦрж╛ рж╣рж╛рж░рж╛ржо ЁЯШМ",
        "ржоржи рж╕рзБржирзНржжрж░ ржмрж╛ржирж╛ржУ ржорзБржЦрзЗрж░ ржЬржирзНржп рждрзЛ 'Snapchat' ржЖржЫрзЗржЗ! ЁЯМЪ"
      ];
      const randomReply = greetings[Math.floor(Math.random() * greetings.length)];
      const mention = {
        body: `@${senderName} ${randomReply}`,
        mentions: [{ tag: `@${senderName}`, id: senderID }]
      };

      return api.sendMessage(mention, event.threadID, (err, info) => {
        if (!err) {
          global.client.handleReply.push({
            name: module.exports.config.name,
            messageID: info.messageID,
            author: event.senderID,
            type: "simsimi"
          });
        }
      }, event.messageID);
    }

    const triggerRegex = new RegExp(`^(${triggers.join("|")})\\s+`, "i");
    if (triggerRegex.test(raw)) {
      const query = raw.replace(triggerRegex, "").trim();
      if (!query) return;

      const res = await axios.get(`${simsim}/simsimi?text=${encodeURIComponent(query)}&senderName=${encodeURIComponent(senderName)}`, { timeout: 5000 });
      const responses = Array.isArray(res.data.response) ? res.data.response : [res.data.response];

      for (const reply of responses) {
        if (!reply) continue;
        await new Promise((resolve) => {
          api.sendMessage(reply, event.threadID, (err, info) => {
            if (!err && !global.client.handleReply.find(r => r.messageID === info.messageID)) {
              global.client.handleReply.push({
                name: module.exports.config.name,
                messageID: info.messageID,
                author: event.senderID,
                type: "simsimi"
              });
            }
            resolve();
          }, event.messageID);
        });
      }
    }
  } catch (err) {
    console.error(err);
    return api.sendMessage(`| Error in handleEvent: ${err.message}`, event.threadID, event.messageID);
  }
};
